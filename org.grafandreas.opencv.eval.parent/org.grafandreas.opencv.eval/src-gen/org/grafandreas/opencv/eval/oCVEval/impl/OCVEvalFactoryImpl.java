/**
 * generated by Xtext 2.18.0.M3
 */
package org.grafandreas.opencv.eval.oCVEval.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.grafandreas.opencv.eval.oCVEval.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OCVEvalFactoryImpl extends EFactoryImpl implements OCVEvalFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static OCVEvalFactory init()
  {
    try
    {
      OCVEvalFactory theOCVEvalFactory = (OCVEvalFactory)EPackage.Registry.INSTANCE.getEFactory(OCVEvalPackage.eNS_URI);
      if (theOCVEvalFactory != null)
      {
        return theOCVEvalFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new OCVEvalFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OCVEvalFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case OCVEvalPackage.MODEL: return createModel();
      case OCVEvalPackage.XMETHOD_DECLARATION: return createXMethodDeclaration();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XMethodDeclaration createXMethodDeclaration()
  {
    XMethodDeclarationImpl xMethodDeclaration = new XMethodDeclarationImpl();
    return xMethodDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OCVEvalPackage getOCVEvalPackage()
  {
    return (OCVEvalPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static OCVEvalPackage getPackage()
  {
    return OCVEvalPackage.eINSTANCE;
  }

} //OCVEvalFactoryImpl
